#!/usr/bin/env python
'''
HTTP client to upload acquisition files.

pip install requests

http://babun.tissuemaps.org/api/acquisitions/dG1hcHM4Ng==/image_files
http://babun.tissuemaps.org/api/acquisitions/dG1hcHM4Ng==/metadata_files

'''
import os
import re
import yaml
import base64
import shutil
import logging
import argparse
import urllib
import requests


logger = logging.getLogger(__name__)


BASE_URL = 'http://babun.tissuemaps.org/'
EXPERIMENT_ID = 'dG1hcHM1OQ=='
ACQUISITION_ID = 'dG1hcHM4Nw=='
DEFAULT_PARAMS = {}
LOCAL_ACQ_FILES = os.path.expanduser('~/dev/tmaps/TmTestdata/'
                                     '150820-Testset-CV/acquisition_1')

USER_CREDENTIALS = {
    'username': 'test',
    'password': 'pass',
}


def base64url_decode(input):
    rem = len(input) % 4
    if rem > 0:
        input += b'=' * (4 - rem)
    return base64.urlsafe_b64decode(input)


class TmapsHttpClient(object):

    def __init__(self, base_url, params={}):
        self.session = requests.Session()
        assert base_url.startswith('http') \
            and base_url.endswith('/')
        self.base_url = base_url
        self.session.get(base_url)
        self.load_credetials()
        self.params = DEFAULT_PARAMS.copy()
        self.params.update(params)

    def load_credetials(self):
        user_credentials = USER_CREDENTIALS
        cred_filepath = os.path.expanduser('~/.tmaps_uploader.yaml')
        if os.path.exists(cred_filepath):
            with open(cred_filepath) as cred_file:
                user_credentials = yaml.load(cred_file.read())
        self.username = user_credentials['username']
        self.password = user_credentials['password']

    def get_url(self, uri, params=None):
        url = self.base_url + uri
        if params is None:
            return url
        return '%s?%s' % (url, urllib.urlencode(params))

    def handle_error(self, result):
        if result.status_code != 200:
            error_message = 'Error %s: ' % result.status_code
            json = result.json()
            error_message += str(json['error'])
            if 'description' in json:
                error_message += json['description']
            raise Exception(error_message)

    def login(self):
        logger.debug('Login in as: "%s, xxxxxxx"' % self.username)
        url = self.get_url('/auth')
        payload = {
            'username': self.username,
            'password': self.password,
        }
        res = self.session.post(url, json=payload)
        self.handle_error(res)
        self._access_token = res.json()['access_token']
        self.session.headers.update({'Authorization': 'JWT %s' %
                                    self._access_token})

    def get_image_files(self):
        url = self.get_url('/api/acquisitions/' + ACQUISITION_ID +
                           '/image_files')
        res = self.session.get(url)
        self.handle_error(res)
        return res.json()['data']

    def get_metadata_files(self):
        url = self.get_url('/api/acquisitions/' + ACQUISITION_ID +
                           '/metadata_files')
        res = self.session.get(url)
        self.handle_error(res)
        return res.json()['data']

    def _upload_register(self, filename):
        url = self.get_url('/api/acquisitions/' + ACQUISITION_ID +
                           '/upload/register')
        payload = {'files': [filename]}
        res = self.session.put(url, json=payload)
        self.handle_error(res)
        # print res.json()

    def _upload_file(self, filepath):
        url = self.get_url('/api/acquisitions/' + ACQUISITION_ID +
                           '/upload/upload-file')
        files = {'file': open(filepath, 'rb')}
        res = self.session.post(url, files=files)
        self.handle_error(res)
        print res.json()

    def upload_file(self, filepath):
        self._upload_register(os.path.basename(filepath))
        self._upload_file(filepath)

    def upload_files(self):
        for filename in os.listdir(LOCAL_ACQ_FILES):
            filepath = os.path.join(LOCAL_ACQ_FILES, filename)
            print 'Uploading: %s' % filepath
            client.upload_file(filepath)


def parse_args():
    parser = argparse.ArgumentParser(
        description='Utility to upload files from the microscope into '
                    'the website via HTTP.')

    parser.add_argument('-u', '--url', default=BASE_URL,
                        help='URL of the TissueMAPs service, e.g. %s' %
                        BASE_URL)
    parser.add_argument('path',
                        help='Local directory with microscope image and '
                        'metadata files to upload')
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    client = TmapsHttpClient(base_url=args.url)
    client.login()
    image_files = client.get_image_files()
    print image_files
